{"version":3,"file":"shadow-css-4f9ce44d-73a7c17a.js","sources":["../../dist/esm/shadow-css-4f9ce44d.js"],"sourcesContent":["/*\n Stencil Client Platform v4.5.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\n/**\n * Little helper for generating a regex that will match a specified\n * CSS selector when that selector is _not_ a part of a `@supports` rule.\n *\n * The pattern will match the provided `selector` (i.e. ':host', ':host-context', etc.)\n * when that selector is not a part of a `@supports` selector rule _or_ if the selector\n * is a part of the rule's declaration.\n *\n * For instance, if we create the regex with the selector ':host-context':\n * - '@supports selector(:host-context())' will return no matches (starts with '@supports')\n * - '@supports selector(:host-context()) { :host-context() { ... }}' will match the second ':host-context' (part of declaration)\n * - ':host-context() { ... }' will match ':host-context' (selector is not a '@supports' rule)\n * - ':host() { ... }' will return no matches (selector doesn't match selector used to create regex)\n *\n * @param selector The CSS selector we want to match for replacement\n * @returns A look-behind regex containing the selector\n */\nconst createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<=\\{.*))(${selector}\\\\b)`, 'gim');\nconst _colonSlottedRe = createSupportsRuleRe('::slotted');\nconst _colonHostRe = createSupportsRuleRe(':host');\nconst _colonHostContextRe = createSupportsRuleRe(':host-context');\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\n/**\n * Replaces certain strings within the CSS with placeholders\n * that will later be replaced with class selectors appropriate\n * for the level of encapsulation (shadow or scoped).\n *\n * When performing these replacements, we want to ignore selectors that are a\n * part of an `@supports` rule. Replacing these selectors will result in invalid\n * CSS that gets passed to autoprefixer/postcss once the placeholders are replaced.\n * For example, a rule like:\n *\n * ```css\n * @supports selector(:host()) {\n *   :host {\n *     color: red;\n *   }\n * }\n * ```\n *\n * Should be converted to:\n *\n * ```css\n * @supports selector(:host()) {\n *   -shadowcsshost {\n *     color: red;\n *   }\n * }\n * ```\n *\n * The order the regex replacements happen in matters since we match\n * against a whole selector word so we need to match all of `:host-context`\n * before we try to replace `:host`. Otherwise the pattern for `:host` would match\n * `:host-context` resulting in something like `:-shadowcsshost-context`.\n *\n * @param cssText A CSS string for a component\n * @returns The modified CSS string\n */\nconst insertPolyfillHostInCssText = (cssText) => {\n    // These replacements use a special syntax with the `$1`. When the replacement\n    // occurs, `$1` maps to the content of the string leading up to the selector\n    // to be replaced.\n    //\n    // Otherwise, we will replace all the preceding content in addition to the\n    // selector because of the lookbehind in the regex.\n    //\n    // e.g. `/*!@___0___*/:host {}` => `/*!@___0___*/--shadowcsshost {}`\n    cssText = cssText\n        .replace(_colonHostContextRe, `$1${_polyfillHostContext}`)\n        .replace(_colonHostRe, `$1${_polyfillHost}`)\n        .replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n    return cssText;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n\n//# sourceMappingURL=shadow-css-4f9ce44d.js.map"],"names":["safeSelector","selector","placeholders","index","_","keep","replaceBy","pseudo","exp","restoreSafeSelector","content","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","createSupportsRuleRe","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","m","suffix","contentPrefix","rule","inputParts","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","insertPolyfillHostInCssText","cssText","convertColonRule","regExp","partReplacer","parts","r","i","p","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","injectScopingSelector","scopingSelector","before","_colonGroup","colon","after","applySimpleSelectorScope","hostSelector","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","scopedSelector","startIndex","res","sep","shouldScope","separator","scopedPart","scopeSelectorText","slotSelector","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped"],"mappings":"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"}